//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: services.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate AuthenticationServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol AuthenticationServiceService {
  func login(_ request: GRPCLoginRequest, callOptions: CallOptions?) -> UnaryCall<GRPCLoginRequest, GRPCLoginResponse>
  func register(_ request: GRPCRegisterRequest, callOptions: CallOptions?) -> UnaryCall<GRPCRegisterRequest, GRPCRegisterResponse>
  func logout(_ request: GRPCLogoutRequest, callOptions: CallOptions?) -> UnaryCall<GRPCLogoutRequest, GRPCLogoutResponse>
  func describeOAuth2Client(_ request: GRPCDescribeOAuth2ClientRequest, callOptions: CallOptions?) -> UnaryCall<GRPCDescribeOAuth2ClientRequest, GRPCDescribeOAuth2ClientResponse>
}

internal final class AuthenticationServiceServiceClient: GRPCClient, AuthenticationServiceService {
  internal let connection: ClientConnection
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the AuthenticationService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to Login.
  ///
  /// - Parameters:
  ///   - request: Request to send to Login.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func login(_ request: GRPCLoginRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCLoginRequest, GRPCLoginResponse> {
    return self.makeUnaryCall(path: "/AuthenticationService/Login",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to Register.
  ///
  /// - Parameters:
  ///   - request: Request to send to Register.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func register(_ request: GRPCRegisterRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCRegisterRequest, GRPCRegisterResponse> {
    return self.makeUnaryCall(path: "/AuthenticationService/Register",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to Logout.
  ///
  /// - Parameters:
  ///   - request: Request to send to Logout.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func logout(_ request: GRPCLogoutRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCLogoutRequest, GRPCLogoutResponse> {
    return self.makeUnaryCall(path: "/AuthenticationService/Logout",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DescribeOAuth2Client.
  ///
  /// - Parameters:
  ///   - request: Request to send to DescribeOAuth2Client.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func describeOAuth2Client(_ request: GRPCDescribeOAuth2ClientRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCDescribeOAuth2ClientRequest, GRPCDescribeOAuth2ClientResponse> {
    return self.makeUnaryCall(path: "/AuthenticationService/DescribeOAuth2Client",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate CredentialServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol CredentialServiceService {
  func listCredentials(_ request: GRPCListCredentialsRequest, callOptions: CallOptions?) -> UnaryCall<GRPCListCredentialsRequest, GRPCListCredentialsResponse>
  func createCredential(_ request: GRPCCreateCredentialRequest, callOptions: CallOptions?) -> UnaryCall<GRPCCreateCredentialRequest, GRPCCreateCredentialResponse>
  func deleteCredential(_ request: GRPCDeleteCredentialRequest, callOptions: CallOptions?) -> UnaryCall<GRPCDeleteCredentialRequest, GRPCDeleteCredentialResponse>
  func updateCredential(_ request: GRPCUpdateCredentialRequest, callOptions: CallOptions?) -> UnaryCall<GRPCUpdateCredentialRequest, GRPCUpdateCredentialResponse>
  func refreshCredentials(_ request: GRPCRefreshCredentialsRequest, callOptions: CallOptions?) -> UnaryCall<GRPCRefreshCredentialsRequest, GRPCRefreshCredentialsResponse>
  func supplementInformation(_ request: GRPCSupplementInformationRequest, callOptions: CallOptions?) -> UnaryCall<GRPCSupplementInformationRequest, GRPCSupplementInformationResponse>
  func cancelSupplementInformation(_ request: GRPCCancelSupplementInformationRequest, callOptions: CallOptions?) -> UnaryCall<GRPCCancelSupplementInformationRequest, GRPCCancelSupplementInformationResponse>
  func enableCredential(_ request: GRPCEnableCredentialRequest, callOptions: CallOptions?) -> UnaryCall<GRPCEnableCredentialRequest, GRPCEnableCredentialResponse>
  func disableCredential(_ request: GRPCDisableCredentialRequest, callOptions: CallOptions?) -> UnaryCall<GRPCDisableCredentialRequest, GRPCDisableCredentialResponse>
  func thirdPartyCallback(_ request: GRPCThirdPartyCallbackRequest, callOptions: CallOptions?) -> UnaryCall<GRPCThirdPartyCallbackRequest, GRPCThirdPartyCallbackResponse>
  func manualAuthentication(_ request: GRPCManualAuthenticationRequest, callOptions: CallOptions?) -> UnaryCall<GRPCManualAuthenticationRequest, GRPCManualAuthenticationResponse>
}

internal final class CredentialServiceServiceClient: GRPCClient, CredentialServiceService {
  internal let connection: ClientConnection
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the CredentialService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to ListCredentials.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCredentials.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listCredentials(_ request: GRPCListCredentialsRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCListCredentialsRequest, GRPCListCredentialsResponse> {
    return self.makeUnaryCall(path: "/CredentialService/ListCredentials",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to CreateCredential.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCredential.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createCredential(_ request: GRPCCreateCredentialRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCCreateCredentialRequest, GRPCCreateCredentialResponse> {
    return self.makeUnaryCall(path: "/CredentialService/CreateCredential",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DeleteCredential.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCredential.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteCredential(_ request: GRPCDeleteCredentialRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCDeleteCredentialRequest, GRPCDeleteCredentialResponse> {
    return self.makeUnaryCall(path: "/CredentialService/DeleteCredential",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to UpdateCredential.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateCredential.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateCredential(_ request: GRPCUpdateCredentialRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCUpdateCredentialRequest, GRPCUpdateCredentialResponse> {
    return self.makeUnaryCall(path: "/CredentialService/UpdateCredential",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to RefreshCredentials.
  ///
  /// - Parameters:
  ///   - request: Request to send to RefreshCredentials.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func refreshCredentials(_ request: GRPCRefreshCredentialsRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCRefreshCredentialsRequest, GRPCRefreshCredentialsResponse> {
    return self.makeUnaryCall(path: "/CredentialService/RefreshCredentials",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to SupplementInformation.
  ///
  /// - Parameters:
  ///   - request: Request to send to SupplementInformation.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supplementInformation(_ request: GRPCSupplementInformationRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCSupplementInformationRequest, GRPCSupplementInformationResponse> {
    return self.makeUnaryCall(path: "/CredentialService/SupplementInformation",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to CancelSupplementInformation.
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelSupplementInformation.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelSupplementInformation(_ request: GRPCCancelSupplementInformationRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCCancelSupplementInformationRequest, GRPCCancelSupplementInformationResponse> {
    return self.makeUnaryCall(path: "/CredentialService/CancelSupplementInformation",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to EnableCredential.
  ///
  /// - Parameters:
  ///   - request: Request to send to EnableCredential.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func enableCredential(_ request: GRPCEnableCredentialRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCEnableCredentialRequest, GRPCEnableCredentialResponse> {
    return self.makeUnaryCall(path: "/CredentialService/EnableCredential",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DisableCredential.
  ///
  /// - Parameters:
  ///   - request: Request to send to DisableCredential.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disableCredential(_ request: GRPCDisableCredentialRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCDisableCredentialRequest, GRPCDisableCredentialResponse> {
    return self.makeUnaryCall(path: "/CredentialService/DisableCredential",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ThirdPartyCallback.
  ///
  /// - Parameters:
  ///   - request: Request to send to ThirdPartyCallback.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func thirdPartyCallback(_ request: GRPCThirdPartyCallbackRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCThirdPartyCallbackRequest, GRPCThirdPartyCallbackResponse> {
    return self.makeUnaryCall(path: "/CredentialService/ThirdPartyCallback",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ManualAuthentication.
  ///
  /// - Parameters:
  ///   - request: Request to send to ManualAuthentication.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func manualAuthentication(_ request: GRPCManualAuthenticationRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCManualAuthenticationRequest, GRPCManualAuthenticationResponse> {
    return self.makeUnaryCall(path: "/CredentialService/ManualAuthentication",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate ProviderServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol ProviderServiceService {
  func listProviders(_ request: GRPCProviderListRequest, callOptions: CallOptions?) -> UnaryCall<GRPCProviderListRequest, GRPCListProvidersResponse>
  func listProvidersForMarkets(_ request: GRPCProviderListForMarketsRequest, callOptions: CallOptions?) -> UnaryCall<GRPCProviderListForMarketsRequest, GRPCListProvidersForMarketsResponse>
  func listProviderMarkets(_ request: GRPCProviderMarketListRequest, callOptions: CallOptions?) -> UnaryCall<GRPCProviderMarketListRequest, GRPCProviderMarketListResponse>
  func suggest(_ request: GRPCProviderSuggestRequest, callOptions: CallOptions?) -> UnaryCall<GRPCProviderSuggestRequest, GRPCListProvidersResponse>
}

internal final class ProviderServiceServiceClient: GRPCClient, ProviderServiceService {
  internal let connection: ClientConnection
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the ProviderService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to ListProviders.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListProviders.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listProviders(_ request: GRPCProviderListRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCProviderListRequest, GRPCListProvidersResponse> {
    return self.makeUnaryCall(path: "/ProviderService/ListProviders",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ListProvidersForMarkets.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListProvidersForMarkets.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listProvidersForMarkets(_ request: GRPCProviderListForMarketsRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCProviderListForMarketsRequest, GRPCListProvidersForMarketsResponse> {
    return self.makeUnaryCall(path: "/ProviderService/ListProvidersForMarkets",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ListProviderMarkets.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListProviderMarkets.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func listProviderMarkets(_ request: GRPCProviderMarketListRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCProviderMarketListRequest, GRPCProviderMarketListResponse> {
    return self.makeUnaryCall(path: "/ProviderService/ListProviderMarkets",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to Suggest.
  ///
  /// - Parameters:
  ///   - request: Request to send to Suggest.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func suggest(_ request: GRPCProviderSuggestRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCProviderSuggestRequest, GRPCListProvidersResponse> {
    return self.makeUnaryCall(path: "/ProviderService/Suggest",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate UserServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol UserServiceService {
  func createAnonymous(_ request: GRPCCreateAnonymousRequest, callOptions: CallOptions?) -> UnaryCall<GRPCCreateAnonymousRequest, GRPCCreateAnonymousResponse>
  func getProfile(_ request: GRPCGetProfileRequest, callOptions: CallOptions?) -> UnaryCall<GRPCGetProfileRequest, GRPCGetProfileResponse>
  func deleteUser(_ request: GRPCDeleteUserRequest, callOptions: CallOptions?) -> UnaryCall<GRPCDeleteUserRequest, GRPCDeleteUserResponse>
  func rateApp(_ request: GRPCRateAppRequest, callOptions: CallOptions?) -> UnaryCall<GRPCRateAppRequest, GRPCRateAppResponse>
}

internal final class UserServiceServiceClient: GRPCClient, UserServiceService {
  internal let connection: ClientConnection
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the UserService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to CreateAnonymous.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAnonymous.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAnonymous(_ request: GRPCCreateAnonymousRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCCreateAnonymousRequest, GRPCCreateAnonymousResponse> {
    return self.makeUnaryCall(path: "/UserService/CreateAnonymous",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetProfile.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetProfile.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getProfile(_ request: GRPCGetProfileRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCGetProfileRequest, GRPCGetProfileResponse> {
    return self.makeUnaryCall(path: "/UserService/GetProfile",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DeleteUser.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteUser.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteUser(_ request: GRPCDeleteUserRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCDeleteUserRequest, GRPCDeleteUserResponse> {
    return self.makeUnaryCall(path: "/UserService/DeleteUser",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to RateApp.
  ///
  /// - Parameters:
  ///   - request: Request to send to RateApp.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rateApp(_ request: GRPCRateAppRequest, callOptions: CallOptions? = nil) -> UnaryCall<GRPCRateAppRequest, GRPCRateAppResponse> {
    return self.makeUnaryCall(path: "/UserService/RateApp",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

