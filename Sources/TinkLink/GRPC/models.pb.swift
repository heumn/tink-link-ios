// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum GRPCRateAppStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case clickedIgnore // = 1
  case clickedRateInStore // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .clickedIgnore
    case 2: self = .clickedRateInStore
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .clickedIgnore: return 1
    case .clickedRateInStore: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCRateAppStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCRateAppStatus] = [
    .unknown,
    .clickedIgnore,
    .clickedRateInStore,
  ]
}

#endif  // swift(>=4.2)

enum GRPCGraylistPolicy: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case undefined // = 0
  case allProviders // = 1
  case nonTppProviders // = 2
  case technicallyAvailableProviders // = 3
  case tinkAppProviders // = 4
  case tinkStandardPolicy // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .allProviders
    case 2: self = .nonTppProviders
    case 3: self = .technicallyAvailableProviders
    case 4: self = .tinkAppProviders
    case 5: self = .tinkStandardPolicy
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .allProviders: return 1
    case .nonTppProviders: return 2
    case .technicallyAvailableProviders: return 3
    case .tinkAppProviders: return 4
    case .tinkStandardPolicy: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCGraylistPolicy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCGraylistPolicy] = [
    .undefined,
    .allProviders,
    .nonTppProviders,
    .technicallyAvailableProviders,
    .tinkAppProviders,
    .tinkStandardPolicy,
  ]
}

#endif  // swift(>=4.2)

enum GRPCAuthenticationMethod: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case bankid // = 1
  case emailAndPassword // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .bankid
    case 2: self = .emailAndPassword
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .bankid: return 1
    case .emailAndPassword: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GRPCAuthenticationMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCAuthenticationMethod] = [
    .unknown,
    .bankid,
    .emailAndPassword,
  ]
}

#endif  // swift(>=4.2)

struct GRPCOAuth2ScopeDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCCredential {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var providerName: String {
    get {return _storage._providerName}
    set {_uniqueStorage()._providerName = newValue}
  }

  var type: GRPCCredential.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var status: GRPCCredential.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var statusPayload: String {
    get {return _storage._statusPayload}
    set {_uniqueStorage()._statusPayload = newValue}
  }

  var statusUpdated: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._statusUpdated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._statusUpdated = newValue}
  }
  /// Returns true if `statusUpdated` has been explicitly set.
  var hasStatusUpdated: Bool {return _storage._statusUpdated != nil}
  /// Clears the value of `statusUpdated`. Subsequent reads from it will return its default value.
  mutating func clearStatusUpdated() {_uniqueStorage()._statusUpdated = nil}

  var updated: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updated ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updated = newValue}
  }
  /// Returns true if `updated` has been explicitly set.
  var hasUpdated: Bool {return _storage._updated != nil}
  /// Clears the value of `updated`. Subsequent reads from it will return its default value.
  mutating func clearUpdated() {_uniqueStorage()._updated = nil}

  var fields: Dictionary<String,String> {
    get {return _storage._fields}
    set {_uniqueStorage()._fields = newValue}
  }

  var supplementalInformationFields: [GRPCProviderFieldSpecification] {
    get {return _storage._supplementalInformationFields}
    set {_uniqueStorage()._supplementalInformationFields = newValue}
  }

  var thirdPartyAppAuthentication: GRPCThirdPartyAppAuthentication {
    get {return _storage._thirdPartyAppAuthentication ?? GRPCThirdPartyAppAuthentication()}
    set {_uniqueStorage()._thirdPartyAppAuthentication = newValue}
  }
  /// Returns true if `thirdPartyAppAuthentication` has been explicitly set.
  var hasThirdPartyAppAuthentication: Bool {return _storage._thirdPartyAppAuthentication != nil}
  /// Clears the value of `thirdPartyAppAuthentication`. Subsequent reads from it will return its default value.
  mutating func clearThirdPartyAppAuthentication() {_uniqueStorage()._thirdPartyAppAuthentication = nil}

  var sessionExpiryDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._sessionExpiryDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._sessionExpiryDate = newValue}
  }
  /// Returns true if `sessionExpiryDate` has been explicitly set.
  var hasSessionExpiryDate: Bool {return _storage._sessionExpiryDate != nil}
  /// Clears the value of `sessionExpiryDate`. Subsequent reads from it will return its default value.
  mutating func clearSessionExpiryDate() {_uniqueStorage()._sessionExpiryDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case created // = 1
    case authenticating // = 2
    case updating // = 3
    case updated // = 4
    case temporaryError // = 5
    case authenticationError // = 6
    case permanentError // = 7

    /// Will be deprecated and replaced by "STATUS_AWAITING_THIRD_PARTY_APP_AUTHENTICATION".
    case awaitingMobileBankidAuthentication // = 8
    case awaitingSupplementalInformation // = 9
    case disabled // = 10
    case awaitingThirdPartyAppAuthentication // = 11
    case sessionExpired // = 12
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .created
      case 2: self = .authenticating
      case 3: self = .updating
      case 4: self = .updated
      case 5: self = .temporaryError
      case 6: self = .authenticationError
      case 7: self = .permanentError
      case 8: self = .awaitingMobileBankidAuthentication
      case 9: self = .awaitingSupplementalInformation
      case 10: self = .disabled
      case 11: self = .awaitingThirdPartyAppAuthentication
      case 12: self = .sessionExpired
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .created: return 1
      case .authenticating: return 2
      case .updating: return 3
      case .updated: return 4
      case .temporaryError: return 5
      case .authenticationError: return 6
      case .permanentError: return 7
      case .awaitingMobileBankidAuthentication: return 8
      case .awaitingSupplementalInformation: return 9
      case .disabled: return 10
      case .awaitingThirdPartyAppAuthentication: return 11
      case .sessionExpired: return 12
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case password // = 1

    /// Will be deprecated and replaced by "TYPE_THIRD_PARTY_AUTHENTICATION".
    case mobileBankid // = 2
    case keyfob // = 3
    case fraud // = 4
    case thirdPartyAuthentication // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .password
      case 2: self = .mobileBankid
      case 3: self = .keyfob
      case 4: self = .fraud
      case 5: self = .thirdPartyAuthentication
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .password: return 1
      case .mobileBankid: return 2
      case .keyfob: return 3
      case .fraud: return 4
      case .thirdPartyAuthentication: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension GRPCCredential.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCCredential.Status] = [
    .unknown,
    .created,
    .authenticating,
    .updating,
    .updated,
    .temporaryError,
    .authenticationError,
    .permanentError,
    .awaitingMobileBankidAuthentication,
    .awaitingSupplementalInformation,
    .disabled,
    .awaitingThirdPartyAppAuthentication,
    .sessionExpired,
  ]
}

extension GRPCCredential.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCCredential.TypeEnum] = [
    .unknown,
    .password,
    .mobileBankid,
    .keyfob,
    .fraud,
    .thirdPartyAuthentication,
  ]
}

#endif  // swift(>=4.2)

struct GRPCProvider {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  var type: GRPCProvider.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var status: GRPCProvider.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var credentialType: GRPCCredential.TypeEnum {
    get {return _storage._credentialType}
    set {_uniqueStorage()._credentialType = newValue}
  }

  var helpText: String {
    get {return _storage._helpText}
    set {_uniqueStorage()._helpText = newValue}
  }

  var popular: Bool {
    get {return _storage._popular}
    set {_uniqueStorage()._popular = newValue}
  }

  var fields: [GRPCProviderFieldSpecification] {
    get {return _storage._fields}
    set {_uniqueStorage()._fields = newValue}
  }

  var groupDisplayName: String {
    get {return _storage._groupDisplayName}
    set {_uniqueStorage()._groupDisplayName = newValue}
  }

  var images: GRPCImages {
    get {return _storage._images ?? GRPCImages()}
    set {_uniqueStorage()._images = newValue}
  }
  /// Returns true if `images` has been explicitly set.
  var hasImages: Bool {return _storage._images != nil}
  /// Clears the value of `images`. Subsequent reads from it will return its default value.
  mutating func clearImages() {_uniqueStorage()._images = nil}

  var displayDescription: String {
    get {return _storage._displayDescription}
    set {_uniqueStorage()._displayDescription = newValue}
  }

  var capabilities: [GRPCProvider.Capability] {
    get {return _storage._capabilities}
    set {_uniqueStorage()._capabilities = newValue}
  }

  var marketCode: String {
    get {return _storage._marketCode}
    set {_uniqueStorage()._marketCode = newValue}
  }

  var accessType: GRPCProvider.AccessType {
    get {return _storage._accessType}
    set {_uniqueStorage()._accessType = newValue}
  }

  /// ASS-247: 15 and 16 is removed in favor of 17 and 18
  var financialInstitutionID: String {
    get {return _storage._financialInstitutionID}
    set {_uniqueStorage()._financialInstitutionID = newValue}
  }

  var financialInstitutionName: String {
    get {return _storage._financialInstitutionName}
    set {_uniqueStorage()._financialInstitutionName = newValue}
  }

  var authenticationFlow: GRPCProvider.AuthenticationFlow {
    get {return _storage._authenticationFlow}
    set {_uniqueStorage()._authenticationFlow = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case bank // = 1
    case creditCard // = 2
    case broker // = 3
    case other // = 4
    case test // = 5
    case fraud // = 6
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .bank
      case 2: self = .creditCard
      case 3: self = .broker
      case 4: self = .other
      case 5: self = .test
      case 6: self = .fraud
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .bank: return 1
      case .creditCard: return 2
      case .broker: return 3
      case .other: return 4
      case .test: return 5
      case .fraud: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case enabled // = 1
    case disabled // = 2
    case temporaryDisabled // = 3
    case obsolete // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .enabled
      case 2: self = .disabled
      case 3: self = .temporaryDisabled
      case 4: self = .obsolete
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .enabled: return 1
      case .disabled: return 2
      case .temporaryDisabled: return 3
      case .obsolete: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Capability: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case transfers // = 1
    case mortgageAggregation // = 2
    case checkingAccounts // = 3
    case savingsAccounts // = 4
    case creditCards // = 5
    case investments // = 6
    case loans // = 7
    case payments // = 8
    case mortgageLoan // = 9
    case identityData // = 10
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .transfers
      case 2: self = .mortgageAggregation
      case 3: self = .checkingAccounts
      case 4: self = .savingsAccounts
      case 5: self = .creditCards
      case 6: self = .investments
      case 7: self = .loans
      case 8: self = .payments
      case 9: self = .mortgageLoan
      case 10: self = .identityData
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .transfers: return 1
      case .mortgageAggregation: return 2
      case .checkingAccounts: return 3
      case .savingsAccounts: return 4
      case .creditCards: return 5
      case .investments: return 6
      case .loans: return 7
      case .payments: return 8
      case .mortgageLoan: return 9
      case .identityData: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum AccessType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case openBanking // = 1
    case other // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .openBanking
      case 2: self = .other
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .openBanking: return 1
      case .other: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum AuthenticationFlow: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case embedded // = 1
    case redirect // = 2
    case decoupled // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .embedded
      case 2: self = .redirect
      case 3: self = .decoupled
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .embedded: return 1
      case .redirect: return 2
      case .decoupled: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension GRPCProvider.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCProvider.TypeEnum] = [
    .unknown,
    .bank,
    .creditCard,
    .broker,
    .other,
    .test,
    .fraud,
  ]
}

extension GRPCProvider.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCProvider.Status] = [
    .unknown,
    .enabled,
    .disabled,
    .temporaryDisabled,
    .obsolete,
  ]
}

extension GRPCProvider.Capability: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCProvider.Capability] = [
    .unknown,
    .transfers,
    .mortgageAggregation,
    .checkingAccounts,
    .savingsAccounts,
    .creditCards,
    .investments,
    .loans,
    .payments,
    .mortgageLoan,
    .identityData,
  ]
}

extension GRPCProvider.AccessType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCProvider.AccessType] = [
    .unknown,
    .openBanking,
    .other,
  ]
}

extension GRPCProvider.AuthenticationFlow: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GRPCProvider.AuthenticationFlow] = [
    .unknown,
    .embedded,
    .redirect,
    .decoupled,
  ]
}

#endif  // swift(>=4.2)

struct GRPCProviderFieldSpecification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var description_p: String = String()

  var hint: String = String()

  var maxLength: Int32 = 0

  var minLength: Int32 = 0

  var masked: Bool = false

  var numeric: Bool = false

  var immutable: Bool = false

  var optional: Bool = false

  var name: String = String()

  var value: String = String()

  var pattern: String = String()

  var patternError: String = String()

  var helpText: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCImages {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var iconURL: String = String()

  var bannerURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCUserProfile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var username: String {
    get {return _storage._username}
    set {_uniqueStorage()._username = newValue}
  }

  var nationalID: String {
    get {return _storage._nationalID}
    set {_uniqueStorage()._nationalID = newValue}
  }

  /// The login methods that the user is authorized to use, for example `BANKID`.
  var authorizedLoginMethods: [GRPCAuthenticationMethod] {
    get {return _storage._authorizedLoginMethods}
    set {_uniqueStorage()._authorizedLoginMethods = newValue}
  }

  /// The login methods that are available on the market, for example `EMAIL_AND_PASSWORD` and `BANKID`.
  var availableLoginMethods: [GRPCAuthenticationMethod] {
    get {return _storage._availableLoginMethods}
    set {_uniqueStorage()._availableLoginMethods = newValue}
  }

  var createdDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdDate = newValue}
  }
  /// Returns true if `createdDate` has been explicitly set.
  var hasCreatedDate: Bool {return _storage._createdDate != nil}
  /// Clears the value of `createdDate`. Subsequent reads from it will return its default value.
  mutating func clearCreatedDate() {_uniqueStorage()._createdDate = nil}

  var market: String {
    get {return _storage._market}
    set {_uniqueStorage()._market = newValue}
  }

  var locale: String {
    get {return _storage._locale}
    set {_uniqueStorage()._locale = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCThirdPartyAppAuthentication {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var downloadTitle: String {
    get {return _storage._downloadTitle}
    set {_uniqueStorage()._downloadTitle = newValue}
  }

  var downloadMessage: String {
    get {return _storage._downloadMessage}
    set {_uniqueStorage()._downloadMessage = newValue}
  }

  var upgradeTitle: String {
    get {return _storage._upgradeTitle}
    set {_uniqueStorage()._upgradeTitle = newValue}
  }

  var upgradeMessage: String {
    get {return _storage._upgradeMessage}
    set {_uniqueStorage()._upgradeMessage = newValue}
  }

  var ios: GRPCThirdPartyAppAuthentication.Ios {
    get {return _storage._ios ?? GRPCThirdPartyAppAuthentication.Ios()}
    set {_uniqueStorage()._ios = newValue}
  }
  /// Returns true if `ios` has been explicitly set.
  var hasIos: Bool {return _storage._ios != nil}
  /// Clears the value of `ios`. Subsequent reads from it will return its default value.
  mutating func clearIos() {_uniqueStorage()._ios = nil}

  var android: GRPCThirdPartyAppAuthentication.Android {
    get {return _storage._android ?? GRPCThirdPartyAppAuthentication.Android()}
    set {_uniqueStorage()._android = newValue}
  }
  /// Returns true if `android` has been explicitly set.
  var hasAndroid: Bool {return _storage._android != nil}
  /// Clears the value of `android`. Subsequent reads from it will return its default value.
  mutating func clearAndroid() {_uniqueStorage()._android = nil}

  var web: GRPCThirdPartyAppAuthentication.Web {
    get {return _storage._web ?? GRPCThirdPartyAppAuthentication.Web()}
    set {_uniqueStorage()._web = newValue}
  }
  /// Returns true if `web` has been explicitly set.
  var hasWeb: Bool {return _storage._web != nil}
  /// Clears the value of `web`. Subsequent reads from it will return its default value.
  mutating func clearWeb() {_uniqueStorage()._web = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Ios {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var appStoreURL: String = String()

    var scheme: String = String()

    var deepLinkURL: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Android {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var packageName: String = String()

    var requiredMinimumVersion: Int32 = 0

    var intent: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Web {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var url: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCPolicy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var whitelistRules: GRPCWhitelistRules {
    get {return _storage._whitelistRules ?? GRPCWhitelistRules()}
    set {_uniqueStorage()._whitelistRules = newValue}
  }
  /// Returns true if `whitelistRules` has been explicitly set.
  var hasWhitelistRules: Bool {return _storage._whitelistRules != nil}
  /// Clears the value of `whitelistRules`. Subsequent reads from it will return its default value.
  mutating func clearWhitelistRules() {_uniqueStorage()._whitelistRules = nil}

  var blacklistRules: GRPCBlacklistRules {
    get {return _storage._blacklistRules ?? GRPCBlacklistRules()}
    set {_uniqueStorage()._blacklistRules = newValue}
  }
  /// Returns true if `blacklistRules` has been explicitly set.
  var hasBlacklistRules: Bool {return _storage._blacklistRules != nil}
  /// Clears the value of `blacklistRules`. Subsequent reads from it will return its default value.
  mutating func clearBlacklistRules() {_uniqueStorage()._blacklistRules = nil}

  var canaryRules: [GRPCCanaryRule] {
    get {return _storage._canaryRules}
    set {_uniqueStorage()._canaryRules = newValue}
  }

  var graylistPolicy: GRPCGraylistPolicy {
    get {return _storage._graylistPolicy}
    set {_uniqueStorage()._graylistPolicy = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCWhitelistRules {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var financialInstitutionRules: [GRPCFinancialInstitutionRule] {
    get {return _storage._financialInstitutionRules}
    set {_uniqueStorage()._financialInstitutionRules = newValue}
  }

  var marketRules: [GRPCMarketRule] {
    get {return _storage._marketRules}
    set {_uniqueStorage()._marketRules = newValue}
  }

  var accessTypeRules: [GRPCAccessTypeRule] {
    get {return _storage._accessTypeRules}
    set {_uniqueStorage()._accessTypeRules = newValue}
  }

  var allProvidersRule: GRPCAllProvidersRule {
    get {return _storage._allProvidersRule ?? GRPCAllProvidersRule()}
    set {_uniqueStorage()._allProvidersRule = newValue}
  }
  /// Returns true if `allProvidersRule` has been explicitly set.
  var hasAllProvidersRule: Bool {return _storage._allProvidersRule != nil}
  /// Clears the value of `allProvidersRule`. Subsequent reads from it will return its default value.
  mutating func clearAllProvidersRule() {_uniqueStorage()._allProvidersRule = nil}

  var testProvidersRule: GRPCTestProvidersRule {
    get {return _storage._testProvidersRule ?? GRPCTestProvidersRule()}
    set {_uniqueStorage()._testProvidersRule = newValue}
  }
  /// Returns true if `testProvidersRule` has been explicitly set.
  var hasTestProvidersRule: Bool {return _storage._testProvidersRule != nil}
  /// Clears the value of `testProvidersRule`. Subsequent reads from it will return its default value.
  mutating func clearTestProvidersRule() {_uniqueStorage()._testProvidersRule = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCBlacklistRules {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var financialInstitutionRules: [GRPCFinancialInstitutionRule] {
    get {return _storage._financialInstitutionRules}
    set {_uniqueStorage()._financialInstitutionRules = newValue}
  }

  var marketRules: [GRPCMarketRule] {
    get {return _storage._marketRules}
    set {_uniqueStorage()._marketRules = newValue}
  }

  var accessTypeRules: [GRPCAccessTypeRule] {
    get {return _storage._accessTypeRules}
    set {_uniqueStorage()._accessTypeRules = newValue}
  }

  var allProvidersRule: GRPCAllProvidersRule {
    get {return _storage._allProvidersRule ?? GRPCAllProvidersRule()}
    set {_uniqueStorage()._allProvidersRule = newValue}
  }
  /// Returns true if `allProvidersRule` has been explicitly set.
  var hasAllProvidersRule: Bool {return _storage._allProvidersRule != nil}
  /// Clears the value of `allProvidersRule`. Subsequent reads from it will return its default value.
  mutating func clearAllProvidersRule() {_uniqueStorage()._allProvidersRule = nil}

  var testProvidersRule: GRPCTestProvidersRule {
    get {return _storage._testProvidersRule ?? GRPCTestProvidersRule()}
    set {_uniqueStorage()._testProvidersRule = newValue}
  }
  /// Returns true if `testProvidersRule` has been explicitly set.
  var hasTestProvidersRule: Bool {return _storage._testProvidersRule != nil}
  /// Clears the value of `testProvidersRule`. Subsequent reads from it will return its default value.
  mutating func clearTestProvidersRule() {_uniqueStorage()._testProvidersRule = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCCanaryRule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var financialInstitutionID: String = String()

  var percentage: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCFinancialInstitutionRule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var financialInstitutionID: String = String()

  var isOpenBanking: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCMarketRule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: String {
    get {return _storage._market}
    set {_uniqueStorage()._market = newValue}
  }

  var accessTypeRule: GRPCAccessTypeRule {
    get {return _storage._accessTypeRule ?? GRPCAccessTypeRule()}
    set {_uniqueStorage()._accessTypeRule = newValue}
  }
  /// Returns true if `accessTypeRule` has been explicitly set.
  var hasAccessTypeRule: Bool {return _storage._accessTypeRule != nil}
  /// Clears the value of `accessTypeRule`. Subsequent reads from it will return its default value.
  mutating func clearAccessTypeRule() {_uniqueStorage()._accessTypeRule = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct GRPCAccessTypeRule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isOpenBanking: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCAllProvidersRule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enableAllProviders: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCTestProvidersRule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enableTestProviders: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct GRPCProviderMarket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension GRPCRateAppStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RATE_APP_STATUS_UNKNOWN"),
    1: .same(proto: "RATE_APP_STATUS_CLICKED_IGNORE"),
    2: .same(proto: "RATE_APP_STATUS_CLICKED_RATE_IN_STORE"),
  ]
}

extension GRPCGraylistPolicy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GRAYLIST_POLICY_UNDEFINED"),
    1: .same(proto: "ALL_PROVIDERS"),
    2: .same(proto: "NON_TPP_PROVIDERS"),
    3: .same(proto: "TECHNICALLY_AVAILABLE_PROVIDERS"),
    4: .same(proto: "TINK_APP_PROVIDERS"),
    5: .same(proto: "TINK_STANDARD_POLICY"),
  ]
}

extension GRPCAuthenticationMethod: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTHENTICATION_METHOD_UNKNOWN"),
    1: .same(proto: "AUTHENTICATION_METHOD_BANKID"),
    2: .same(proto: "AUTHENTICATION_METHOD_EMAIL_AND_PASSWORD"),
  ]
}

extension GRPCOAuth2ScopeDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "OAuth2ScopeDescription"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCOAuth2ScopeDescription, rhs: GRPCOAuth2ScopeDescription) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCCredential: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Credential"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "provider_name"),
    3: .same(proto: "type"),
    4: .same(proto: "status"),
    5: .standard(proto: "status_payload"),
    6: .standard(proto: "status_updated"),
    7: .same(proto: "updated"),
    8: .same(proto: "fields"),
    9: .standard(proto: "supplemental_information_fields"),
    10: .standard(proto: "third_party_app_authentication"),
    11: .same(proto: "sessionExpiryDate"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _providerName: String = String()
    var _type: GRPCCredential.TypeEnum = .unknown
    var _status: GRPCCredential.Status = .unknown
    var _statusPayload: String = String()
    var _statusUpdated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updated: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _fields: Dictionary<String,String> = [:]
    var _supplementalInformationFields: [GRPCProviderFieldSpecification] = []
    var _thirdPartyAppAuthentication: GRPCThirdPartyAppAuthentication? = nil
    var _sessionExpiryDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _providerName = source._providerName
      _type = source._type
      _status = source._status
      _statusPayload = source._statusPayload
      _statusUpdated = source._statusUpdated
      _updated = source._updated
      _fields = source._fields
      _supplementalInformationFields = source._supplementalInformationFields
      _thirdPartyAppAuthentication = source._thirdPartyAppAuthentication
      _sessionExpiryDate = source._sessionExpiryDate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._providerName)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 5: try decoder.decodeSingularStringField(value: &_storage._statusPayload)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._statusUpdated)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._updated)
        case 8: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._fields)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._supplementalInformationFields)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._thirdPartyAppAuthentication)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._sessionExpiryDate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._providerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._providerName, fieldNumber: 2)
      }
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 3)
      }
      if _storage._status != .unknown {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 4)
      }
      if !_storage._statusPayload.isEmpty {
        try visitor.visitSingularStringField(value: _storage._statusPayload, fieldNumber: 5)
      }
      if let v = _storage._statusUpdated {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._updated {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._fields.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._fields, fieldNumber: 8)
      }
      if !_storage._supplementalInformationFields.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._supplementalInformationFields, fieldNumber: 9)
      }
      if let v = _storage._thirdPartyAppAuthentication {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._sessionExpiryDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCCredential, rhs: GRPCCredential) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._providerName != rhs_storage._providerName {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._statusPayload != rhs_storage._statusPayload {return false}
        if _storage._statusUpdated != rhs_storage._statusUpdated {return false}
        if _storage._updated != rhs_storage._updated {return false}
        if _storage._fields != rhs_storage._fields {return false}
        if _storage._supplementalInformationFields != rhs_storage._supplementalInformationFields {return false}
        if _storage._thirdPartyAppAuthentication != rhs_storage._thirdPartyAppAuthentication {return false}
        if _storage._sessionExpiryDate != rhs_storage._sessionExpiryDate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCCredential.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_CREATED"),
    2: .same(proto: "STATUS_AUTHENTICATING"),
    3: .same(proto: "STATUS_UPDATING"),
    4: .same(proto: "STATUS_UPDATED"),
    5: .same(proto: "STATUS_TEMPORARY_ERROR"),
    6: .same(proto: "STATUS_AUTHENTICATION_ERROR"),
    7: .same(proto: "STATUS_PERMANENT_ERROR"),
    8: .same(proto: "STATUS_AWAITING_MOBILE_BANKID_AUTHENTICATION"),
    9: .same(proto: "STATUS_AWAITING_SUPPLEMENTAL_INFORMATION"),
    10: .same(proto: "STATUS_DISABLED"),
    11: .same(proto: "STATUS_AWAITING_THIRD_PARTY_APP_AUTHENTICATION"),
    12: .same(proto: "STATUS_SESSION_EXPIRED"),
  ]
}

extension GRPCCredential.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_PASSWORD"),
    2: .same(proto: "TYPE_MOBILE_BANKID"),
    3: .same(proto: "TYPE_KEYFOB"),
    4: .same(proto: "TYPE_FRAUD"),
    5: .same(proto: "TYPE_THIRD_PARTY_AUTHENTICATION"),
  ]
}

extension GRPCProvider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Provider"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "display_name"),
    3: .same(proto: "type"),
    4: .same(proto: "status"),
    5: .standard(proto: "credential_type"),
    6: .standard(proto: "help_text"),
    7: .same(proto: "popular"),
    8: .same(proto: "fields"),
    9: .standard(proto: "group_display_name"),
    10: .same(proto: "images"),
    11: .standard(proto: "display_description"),
    12: .same(proto: "capabilities"),
    13: .standard(proto: "market_code"),
    14: .standard(proto: "access_type"),
    17: .standard(proto: "financial_institution_id"),
    18: .standard(proto: "financial_institution_name"),
    19: .standard(proto: "authentication_flow"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _displayName: String = String()
    var _type: GRPCProvider.TypeEnum = .unknown
    var _status: GRPCProvider.Status = .unknown
    var _credentialType: GRPCCredential.TypeEnum = .unknown
    var _helpText: String = String()
    var _popular: Bool = false
    var _fields: [GRPCProviderFieldSpecification] = []
    var _groupDisplayName: String = String()
    var _images: GRPCImages? = nil
    var _displayDescription: String = String()
    var _capabilities: [GRPCProvider.Capability] = []
    var _marketCode: String = String()
    var _accessType: GRPCProvider.AccessType = .unknown
    var _financialInstitutionID: String = String()
    var _financialInstitutionName: String = String()
    var _authenticationFlow: GRPCProvider.AuthenticationFlow = .unknown

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _displayName = source._displayName
      _type = source._type
      _status = source._status
      _credentialType = source._credentialType
      _helpText = source._helpText
      _popular = source._popular
      _fields = source._fields
      _groupDisplayName = source._groupDisplayName
      _images = source._images
      _displayDescription = source._displayDescription
      _capabilities = source._capabilities
      _marketCode = source._marketCode
      _accessType = source._accessType
      _financialInstitutionID = source._financialInstitutionID
      _financialInstitutionName = source._financialInstitutionName
      _authenticationFlow = source._authenticationFlow
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularStringField(value: &_storage._displayName)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._credentialType)
        case 6: try decoder.decodeSingularStringField(value: &_storage._helpText)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._popular)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._fields)
        case 9: try decoder.decodeSingularStringField(value: &_storage._groupDisplayName)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._images)
        case 11: try decoder.decodeSingularStringField(value: &_storage._displayDescription)
        case 12: try decoder.decodeRepeatedEnumField(value: &_storage._capabilities)
        case 13: try decoder.decodeSingularStringField(value: &_storage._marketCode)
        case 14: try decoder.decodeSingularEnumField(value: &_storage._accessType)
        case 17: try decoder.decodeSingularStringField(value: &_storage._financialInstitutionID)
        case 18: try decoder.decodeSingularStringField(value: &_storage._financialInstitutionName)
        case 19: try decoder.decodeSingularEnumField(value: &_storage._authenticationFlow)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 2)
      }
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 3)
      }
      if _storage._status != .unknown {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 4)
      }
      if _storage._credentialType != .unknown {
        try visitor.visitSingularEnumField(value: _storage._credentialType, fieldNumber: 5)
      }
      if !_storage._helpText.isEmpty {
        try visitor.visitSingularStringField(value: _storage._helpText, fieldNumber: 6)
      }
      if _storage._popular != false {
        try visitor.visitSingularBoolField(value: _storage._popular, fieldNumber: 7)
      }
      if !_storage._fields.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._fields, fieldNumber: 8)
      }
      if !_storage._groupDisplayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._groupDisplayName, fieldNumber: 9)
      }
      if let v = _storage._images {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if !_storage._displayDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayDescription, fieldNumber: 11)
      }
      if !_storage._capabilities.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._capabilities, fieldNumber: 12)
      }
      if !_storage._marketCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._marketCode, fieldNumber: 13)
      }
      if _storage._accessType != .unknown {
        try visitor.visitSingularEnumField(value: _storage._accessType, fieldNumber: 14)
      }
      if !_storage._financialInstitutionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._financialInstitutionID, fieldNumber: 17)
      }
      if !_storage._financialInstitutionName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._financialInstitutionName, fieldNumber: 18)
      }
      if _storage._authenticationFlow != .unknown {
        try visitor.visitSingularEnumField(value: _storage._authenticationFlow, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCProvider, rhs: GRPCProvider) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._credentialType != rhs_storage._credentialType {return false}
        if _storage._helpText != rhs_storage._helpText {return false}
        if _storage._popular != rhs_storage._popular {return false}
        if _storage._fields != rhs_storage._fields {return false}
        if _storage._groupDisplayName != rhs_storage._groupDisplayName {return false}
        if _storage._images != rhs_storage._images {return false}
        if _storage._displayDescription != rhs_storage._displayDescription {return false}
        if _storage._capabilities != rhs_storage._capabilities {return false}
        if _storage._marketCode != rhs_storage._marketCode {return false}
        if _storage._accessType != rhs_storage._accessType {return false}
        if _storage._financialInstitutionID != rhs_storage._financialInstitutionID {return false}
        if _storage._financialInstitutionName != rhs_storage._financialInstitutionName {return false}
        if _storage._authenticationFlow != rhs_storage._authenticationFlow {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCProvider.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNKNOWN"),
    1: .same(proto: "TYPE_BANK"),
    2: .same(proto: "TYPE_CREDIT_CARD"),
    3: .same(proto: "TYPE_BROKER"),
    4: .same(proto: "TYPE_OTHER"),
    5: .same(proto: "TYPE_TEST"),
    6: .same(proto: "TYPE_FRAUD"),
  ]
}

extension GRPCProvider.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNKNOWN"),
    1: .same(proto: "STATUS_ENABLED"),
    2: .same(proto: "STATUS_DISABLED"),
    3: .same(proto: "STATUS_TEMPORARY_DISABLED"),
    4: .same(proto: "STATUS_OBSOLETE"),
  ]
}

extension GRPCProvider.Capability: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CAPABILITY_UNKNOWN"),
    1: .same(proto: "CAPABILITY_TRANSFERS"),
    2: .same(proto: "CAPABILITY_MORTGAGE_AGGREGATION"),
    3: .same(proto: "CAPABILITY_CHECKING_ACCOUNTS"),
    4: .same(proto: "CAPABILITY_SAVINGS_ACCOUNTS"),
    5: .same(proto: "CAPABILITY_CREDIT_CARDS"),
    6: .same(proto: "CAPABILITY_INVESTMENTS"),
    7: .same(proto: "CAPABILITY_LOANS"),
    8: .same(proto: "CAPABILITY_PAYMENTS"),
    9: .same(proto: "CAPABILITY_MORTGAGE_LOAN"),
    10: .same(proto: "CAPABILITY_IDENTITY_DATA"),
  ]
}

extension GRPCProvider.AccessType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACCESS_TYPE_UNKNOWN"),
    1: .same(proto: "ACCESS_TYPE_OPEN_BANKING"),
    2: .same(proto: "ACCESS_TYPE_OTHER"),
  ]
}

extension GRPCProvider.AuthenticationFlow: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTHENTICATION_FLOW_UNKNOWN"),
    1: .same(proto: "AUTHENTICATION_FLOW_EMBEDDED"),
    2: .same(proto: "AUTHENTICATION_FLOW_REDIRECT"),
    3: .same(proto: "AUTHENTICATION_FLOW_DECOUPLED"),
  ]
}

extension GRPCProviderFieldSpecification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ProviderFieldSpecification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "hint"),
    3: .standard(proto: "max_length"),
    4: .standard(proto: "min_length"),
    5: .same(proto: "masked"),
    6: .same(proto: "numeric"),
    7: .same(proto: "immutable"),
    8: .same(proto: "optional"),
    9: .same(proto: "name"),
    10: .same(proto: "value"),
    11: .same(proto: "pattern"),
    12: .standard(proto: "pattern_error"),
    13: .standard(proto: "help_text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.description_p)
      case 2: try decoder.decodeSingularStringField(value: &self.hint)
      case 3: try decoder.decodeSingularInt32Field(value: &self.maxLength)
      case 4: try decoder.decodeSingularInt32Field(value: &self.minLength)
      case 5: try decoder.decodeSingularBoolField(value: &self.masked)
      case 6: try decoder.decodeSingularBoolField(value: &self.numeric)
      case 7: try decoder.decodeSingularBoolField(value: &self.immutable)
      case 8: try decoder.decodeSingularBoolField(value: &self.optional)
      case 9: try decoder.decodeSingularStringField(value: &self.name)
      case 10: try decoder.decodeSingularStringField(value: &self.value)
      case 11: try decoder.decodeSingularStringField(value: &self.pattern)
      case 12: try decoder.decodeSingularStringField(value: &self.patternError)
      case 13: try decoder.decodeSingularStringField(value: &self.helpText)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    if !self.hint.isEmpty {
      try visitor.visitSingularStringField(value: self.hint, fieldNumber: 2)
    }
    if self.maxLength != 0 {
      try visitor.visitSingularInt32Field(value: self.maxLength, fieldNumber: 3)
    }
    if self.minLength != 0 {
      try visitor.visitSingularInt32Field(value: self.minLength, fieldNumber: 4)
    }
    if self.masked != false {
      try visitor.visitSingularBoolField(value: self.masked, fieldNumber: 5)
    }
    if self.numeric != false {
      try visitor.visitSingularBoolField(value: self.numeric, fieldNumber: 6)
    }
    if self.immutable != false {
      try visitor.visitSingularBoolField(value: self.immutable, fieldNumber: 7)
    }
    if self.optional != false {
      try visitor.visitSingularBoolField(value: self.optional, fieldNumber: 8)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 9)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 10)
    }
    if !self.pattern.isEmpty {
      try visitor.visitSingularStringField(value: self.pattern, fieldNumber: 11)
    }
    if !self.patternError.isEmpty {
      try visitor.visitSingularStringField(value: self.patternError, fieldNumber: 12)
    }
    if !self.helpText.isEmpty {
      try visitor.visitSingularStringField(value: self.helpText, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCProviderFieldSpecification, rhs: GRPCProviderFieldSpecification) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.hint != rhs.hint {return false}
    if lhs.maxLength != rhs.maxLength {return false}
    if lhs.minLength != rhs.minLength {return false}
    if lhs.masked != rhs.masked {return false}
    if lhs.numeric != rhs.numeric {return false}
    if lhs.immutable != rhs.immutable {return false}
    if lhs.optional != rhs.optional {return false}
    if lhs.name != rhs.name {return false}
    if lhs.value != rhs.value {return false}
    if lhs.pattern != rhs.pattern {return false}
    if lhs.patternError != rhs.patternError {return false}
    if lhs.helpText != rhs.helpText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCImages: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Images"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "icon_url"),
    2: .standard(proto: "banner_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.iconURL)
      case 2: try decoder.decodeSingularStringField(value: &self.bannerURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.iconURL.isEmpty {
      try visitor.visitSingularStringField(value: self.iconURL, fieldNumber: 1)
    }
    if !self.bannerURL.isEmpty {
      try visitor.visitSingularStringField(value: self.bannerURL, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCImages, rhs: GRPCImages) -> Bool {
    if lhs.iconURL != rhs.iconURL {return false}
    if lhs.bannerURL != rhs.bannerURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCUserProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UserProfile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .standard(proto: "national_id"),
    3: .standard(proto: "authorized_login_methods"),
    4: .standard(proto: "available_login_methods"),
    5: .standard(proto: "created_date"),
    6: .same(proto: "market"),
    7: .same(proto: "locale"),
  ]

  fileprivate class _StorageClass {
    var _username: String = String()
    var _nationalID: String = String()
    var _authorizedLoginMethods: [GRPCAuthenticationMethod] = []
    var _availableLoginMethods: [GRPCAuthenticationMethod] = []
    var _createdDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _market: String = String()
    var _locale: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _username = source._username
      _nationalID = source._nationalID
      _authorizedLoginMethods = source._authorizedLoginMethods
      _availableLoginMethods = source._availableLoginMethods
      _createdDate = source._createdDate
      _market = source._market
      _locale = source._locale
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._username)
        case 2: try decoder.decodeSingularStringField(value: &_storage._nationalID)
        case 3: try decoder.decodeRepeatedEnumField(value: &_storage._authorizedLoginMethods)
        case 4: try decoder.decodeRepeatedEnumField(value: &_storage._availableLoginMethods)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._createdDate)
        case 6: try decoder.decodeSingularStringField(value: &_storage._market)
        case 7: try decoder.decodeSingularStringField(value: &_storage._locale)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._username.isEmpty {
        try visitor.visitSingularStringField(value: _storage._username, fieldNumber: 1)
      }
      if !_storage._nationalID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nationalID, fieldNumber: 2)
      }
      if !_storage._authorizedLoginMethods.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._authorizedLoginMethods, fieldNumber: 3)
      }
      if !_storage._availableLoginMethods.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._availableLoginMethods, fieldNumber: 4)
      }
      if let v = _storage._createdDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._market.isEmpty {
        try visitor.visitSingularStringField(value: _storage._market, fieldNumber: 6)
      }
      if !_storage._locale.isEmpty {
        try visitor.visitSingularStringField(value: _storage._locale, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCUserProfile, rhs: GRPCUserProfile) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._username != rhs_storage._username {return false}
        if _storage._nationalID != rhs_storage._nationalID {return false}
        if _storage._authorizedLoginMethods != rhs_storage._authorizedLoginMethods {return false}
        if _storage._availableLoginMethods != rhs_storage._availableLoginMethods {return false}
        if _storage._createdDate != rhs_storage._createdDate {return false}
        if _storage._market != rhs_storage._market {return false}
        if _storage._locale != rhs_storage._locale {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCThirdPartyAppAuthentication: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThirdPartyAppAuthentication"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "download_title"),
    2: .standard(proto: "download_message"),
    3: .standard(proto: "upgrade_title"),
    4: .standard(proto: "upgrade_message"),
    5: .same(proto: "ios"),
    6: .same(proto: "android"),
    7: .same(proto: "web"),
  ]

  fileprivate class _StorageClass {
    var _downloadTitle: String = String()
    var _downloadMessage: String = String()
    var _upgradeTitle: String = String()
    var _upgradeMessage: String = String()
    var _ios: GRPCThirdPartyAppAuthentication.Ios? = nil
    var _android: GRPCThirdPartyAppAuthentication.Android? = nil
    var _web: GRPCThirdPartyAppAuthentication.Web? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _downloadTitle = source._downloadTitle
      _downloadMessage = source._downloadMessage
      _upgradeTitle = source._upgradeTitle
      _upgradeMessage = source._upgradeMessage
      _ios = source._ios
      _android = source._android
      _web = source._web
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._downloadTitle)
        case 2: try decoder.decodeSingularStringField(value: &_storage._downloadMessage)
        case 3: try decoder.decodeSingularStringField(value: &_storage._upgradeTitle)
        case 4: try decoder.decodeSingularStringField(value: &_storage._upgradeMessage)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._ios)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._android)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._web)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._downloadTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._downloadTitle, fieldNumber: 1)
      }
      if !_storage._downloadMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._downloadMessage, fieldNumber: 2)
      }
      if !_storage._upgradeTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._upgradeTitle, fieldNumber: 3)
      }
      if !_storage._upgradeMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._upgradeMessage, fieldNumber: 4)
      }
      if let v = _storage._ios {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._android {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._web {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCThirdPartyAppAuthentication, rhs: GRPCThirdPartyAppAuthentication) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._downloadTitle != rhs_storage._downloadTitle {return false}
        if _storage._downloadMessage != rhs_storage._downloadMessage {return false}
        if _storage._upgradeTitle != rhs_storage._upgradeTitle {return false}
        if _storage._upgradeMessage != rhs_storage._upgradeMessage {return false}
        if _storage._ios != rhs_storage._ios {return false}
        if _storage._android != rhs_storage._android {return false}
        if _storage._web != rhs_storage._web {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCThirdPartyAppAuthentication.Ios: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCThirdPartyAppAuthentication.protoMessageName + ".Ios"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_store_url"),
    2: .same(proto: "scheme"),
    3: .standard(proto: "deep_link_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.appStoreURL)
      case 2: try decoder.decodeSingularStringField(value: &self.scheme)
      case 3: try decoder.decodeSingularStringField(value: &self.deepLinkURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appStoreURL.isEmpty {
      try visitor.visitSingularStringField(value: self.appStoreURL, fieldNumber: 1)
    }
    if !self.scheme.isEmpty {
      try visitor.visitSingularStringField(value: self.scheme, fieldNumber: 2)
    }
    if !self.deepLinkURL.isEmpty {
      try visitor.visitSingularStringField(value: self.deepLinkURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCThirdPartyAppAuthentication.Ios, rhs: GRPCThirdPartyAppAuthentication.Ios) -> Bool {
    if lhs.appStoreURL != rhs.appStoreURL {return false}
    if lhs.scheme != rhs.scheme {return false}
    if lhs.deepLinkURL != rhs.deepLinkURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCThirdPartyAppAuthentication.Android: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCThirdPartyAppAuthentication.protoMessageName + ".Android"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "package_name"),
    2: .standard(proto: "required_minimum_version"),
    3: .same(proto: "intent"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.packageName)
      case 2: try decoder.decodeSingularInt32Field(value: &self.requiredMinimumVersion)
      case 3: try decoder.decodeSingularStringField(value: &self.intent)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.packageName.isEmpty {
      try visitor.visitSingularStringField(value: self.packageName, fieldNumber: 1)
    }
    if self.requiredMinimumVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.requiredMinimumVersion, fieldNumber: 2)
    }
    if !self.intent.isEmpty {
      try visitor.visitSingularStringField(value: self.intent, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCThirdPartyAppAuthentication.Android, rhs: GRPCThirdPartyAppAuthentication.Android) -> Bool {
    if lhs.packageName != rhs.packageName {return false}
    if lhs.requiredMinimumVersion != rhs.requiredMinimumVersion {return false}
    if lhs.intent != rhs.intent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCThirdPartyAppAuthentication.Web: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = GRPCThirdPartyAppAuthentication.protoMessageName + ".Web"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCThirdPartyAppAuthentication.Web, rhs: GRPCThirdPartyAppAuthentication.Web) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Policy"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "whitelist_rules"),
    2: .standard(proto: "blacklist_rules"),
    3: .standard(proto: "canary_rules"),
    4: .standard(proto: "graylist_policy"),
  ]

  fileprivate class _StorageClass {
    var _whitelistRules: GRPCWhitelistRules? = nil
    var _blacklistRules: GRPCBlacklistRules? = nil
    var _canaryRules: [GRPCCanaryRule] = []
    var _graylistPolicy: GRPCGraylistPolicy = .undefined

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _whitelistRules = source._whitelistRules
      _blacklistRules = source._blacklistRules
      _canaryRules = source._canaryRules
      _graylistPolicy = source._graylistPolicy
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._whitelistRules)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._blacklistRules)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._canaryRules)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._graylistPolicy)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._whitelistRules {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._blacklistRules {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._canaryRules.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._canaryRules, fieldNumber: 3)
      }
      if _storage._graylistPolicy != .undefined {
        try visitor.visitSingularEnumField(value: _storage._graylistPolicy, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCPolicy, rhs: GRPCPolicy) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._whitelistRules != rhs_storage._whitelistRules {return false}
        if _storage._blacklistRules != rhs_storage._blacklistRules {return false}
        if _storage._canaryRules != rhs_storage._canaryRules {return false}
        if _storage._graylistPolicy != rhs_storage._graylistPolicy {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCWhitelistRules: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "WhitelistRules"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "financial_institution_rules"),
    2: .standard(proto: "market_rules"),
    3: .standard(proto: "access_type_rules"),
    4: .standard(proto: "all_providers_rule"),
    5: .standard(proto: "test_providers_rule"),
  ]

  fileprivate class _StorageClass {
    var _financialInstitutionRules: [GRPCFinancialInstitutionRule] = []
    var _marketRules: [GRPCMarketRule] = []
    var _accessTypeRules: [GRPCAccessTypeRule] = []
    var _allProvidersRule: GRPCAllProvidersRule? = nil
    var _testProvidersRule: GRPCTestProvidersRule? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _financialInstitutionRules = source._financialInstitutionRules
      _marketRules = source._marketRules
      _accessTypeRules = source._accessTypeRules
      _allProvidersRule = source._allProvidersRule
      _testProvidersRule = source._testProvidersRule
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._financialInstitutionRules)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._marketRules)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._accessTypeRules)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._allProvidersRule)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._testProvidersRule)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._financialInstitutionRules.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._financialInstitutionRules, fieldNumber: 1)
      }
      if !_storage._marketRules.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._marketRules, fieldNumber: 2)
      }
      if !_storage._accessTypeRules.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._accessTypeRules, fieldNumber: 3)
      }
      if let v = _storage._allProvidersRule {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._testProvidersRule {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCWhitelistRules, rhs: GRPCWhitelistRules) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._financialInstitutionRules != rhs_storage._financialInstitutionRules {return false}
        if _storage._marketRules != rhs_storage._marketRules {return false}
        if _storage._accessTypeRules != rhs_storage._accessTypeRules {return false}
        if _storage._allProvidersRule != rhs_storage._allProvidersRule {return false}
        if _storage._testProvidersRule != rhs_storage._testProvidersRule {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCBlacklistRules: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BlacklistRules"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "financial_institution_rules"),
    2: .standard(proto: "market_rules"),
    3: .standard(proto: "access_type_rules"),
    4: .standard(proto: "all_providers_rule"),
    5: .standard(proto: "test_providers_rule"),
  ]

  fileprivate class _StorageClass {
    var _financialInstitutionRules: [GRPCFinancialInstitutionRule] = []
    var _marketRules: [GRPCMarketRule] = []
    var _accessTypeRules: [GRPCAccessTypeRule] = []
    var _allProvidersRule: GRPCAllProvidersRule? = nil
    var _testProvidersRule: GRPCTestProvidersRule? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _financialInstitutionRules = source._financialInstitutionRules
      _marketRules = source._marketRules
      _accessTypeRules = source._accessTypeRules
      _allProvidersRule = source._allProvidersRule
      _testProvidersRule = source._testProvidersRule
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._financialInstitutionRules)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._marketRules)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._accessTypeRules)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._allProvidersRule)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._testProvidersRule)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._financialInstitutionRules.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._financialInstitutionRules, fieldNumber: 1)
      }
      if !_storage._marketRules.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._marketRules, fieldNumber: 2)
      }
      if !_storage._accessTypeRules.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._accessTypeRules, fieldNumber: 3)
      }
      if let v = _storage._allProvidersRule {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._testProvidersRule {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCBlacklistRules, rhs: GRPCBlacklistRules) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._financialInstitutionRules != rhs_storage._financialInstitutionRules {return false}
        if _storage._marketRules != rhs_storage._marketRules {return false}
        if _storage._accessTypeRules != rhs_storage._accessTypeRules {return false}
        if _storage._allProvidersRule != rhs_storage._allProvidersRule {return false}
        if _storage._testProvidersRule != rhs_storage._testProvidersRule {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCCanaryRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CanaryRule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "financial_institution_id"),
    2: .same(proto: "percentage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.financialInstitutionID)
      case 2: try decoder.decodeSingularDoubleField(value: &self.percentage)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.financialInstitutionID.isEmpty {
      try visitor.visitSingularStringField(value: self.financialInstitutionID, fieldNumber: 1)
    }
    if self.percentage != 0 {
      try visitor.visitSingularDoubleField(value: self.percentage, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCCanaryRule, rhs: GRPCCanaryRule) -> Bool {
    if lhs.financialInstitutionID != rhs.financialInstitutionID {return false}
    if lhs.percentage != rhs.percentage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCFinancialInstitutionRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FinancialInstitutionRule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "financial_institution_id"),
    2: .standard(proto: "is_open_banking"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.financialInstitutionID)
      case 2: try decoder.decodeSingularBoolField(value: &self.isOpenBanking)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.financialInstitutionID.isEmpty {
      try visitor.visitSingularStringField(value: self.financialInstitutionID, fieldNumber: 1)
    }
    if self.isOpenBanking != false {
      try visitor.visitSingularBoolField(value: self.isOpenBanking, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCFinancialInstitutionRule, rhs: GRPCFinancialInstitutionRule) -> Bool {
    if lhs.financialInstitutionID != rhs.financialInstitutionID {return false}
    if lhs.isOpenBanking != rhs.isOpenBanking {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCMarketRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MarketRule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market"),
    2: .standard(proto: "access_type_rule"),
  ]

  fileprivate class _StorageClass {
    var _market: String = String()
    var _accessTypeRule: GRPCAccessTypeRule? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _market = source._market
      _accessTypeRule = source._accessTypeRule
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._market)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._accessTypeRule)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._market.isEmpty {
        try visitor.visitSingularStringField(value: _storage._market, fieldNumber: 1)
      }
      if let v = _storage._accessTypeRule {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCMarketRule, rhs: GRPCMarketRule) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._market != rhs_storage._market {return false}
        if _storage._accessTypeRule != rhs_storage._accessTypeRule {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCAccessTypeRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AccessTypeRule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_open_banking"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.isOpenBanking)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isOpenBanking != false {
      try visitor.visitSingularBoolField(value: self.isOpenBanking, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCAccessTypeRule, rhs: GRPCAccessTypeRule) -> Bool {
    if lhs.isOpenBanking != rhs.isOpenBanking {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCAllProvidersRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AllProvidersRule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "enable_all_providers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.enableAllProviders)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enableAllProviders != false {
      try visitor.visitSingularBoolField(value: self.enableAllProviders, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCAllProvidersRule, rhs: GRPCAllProvidersRule) -> Bool {
    if lhs.enableAllProviders != rhs.enableAllProviders {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCTestProvidersRule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TestProvidersRule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "enable_test_providers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.enableTestProviders)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enableTestProviders != false {
      try visitor.visitSingularBoolField(value: self.enableTestProviders, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCTestProvidersRule, rhs: GRPCTestProvidersRule) -> Bool {
    if lhs.enableTestProviders != rhs.enableTestProviders {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension GRPCProviderMarket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ProviderMarket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GRPCProviderMarket, rhs: GRPCProviderMarket) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
